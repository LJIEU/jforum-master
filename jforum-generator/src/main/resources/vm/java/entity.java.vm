package ${packageName}.entity;

    #foreach($import in $importList)
    import ${import};
    #end
import com.alibaba.excel.annotation.ExcelProperty;
import com.fasterxml.jackson.annotation.JsonFormat;
import io.swagger.v3.oas.annotations.media.Schema;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import com.liu.core.model.BaseEntity;

import java.io.Serial;

/**
 * ${tableDesc}对象 ${tableName}
 *
 * @author ${author}
 * @since ${dateTime}
 */
@Schema(name = "${tableDesc}--实体类")
public class ${ClassName} extends ${baseEntity}{
@Serial
private static final long serialVersionUID=1L;
#foreach($column in $columns)
    ## 【避免 BaseEntity 属性重复】
    #if($column.baseHave!="true")
    /** $column.columnComment.trim() */
    @Schema(description = "$column.columnComment.trim()")
    @ExcelProperty(value = "$column.columnComment.trim()")
        #if($column.javaType == 'Date')
        @JsonFormat(pattern = "yyyy-MM-dd")
        #end
    private $column.javaType $column.javaField;
    #end
#end

#if($template == "tree")
private List<${ClassName}> children;
public List<${ClassName}> getChildren(){return children;}
public void setChildren(List<${ClassName}> children){this.children=children;}
#end


#foreach($column in $columns)
    ## 【避免 BaseEntity 属性重复】
    #if($column.baseHave!="true")
        #*判断如果该字段名称长度大于2并且第二个字母是大写字母就直接赋值[需要满足goodsId ==> GoodsId]*#
        #if($column.javaField.length()>2 && $column.javaField.substring(1,2).matches("[A-Z]"))
            #set($AttrName = $column.javaField)
        #else
            #*加工处理 需要满足goodsId ==> GoodsId*#
            #set($AttrName = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #end
    public void set${AttrName}($column.javaType $column.javaField){
            this.$column.javaField = $column.javaField;
            }
    public $column.javaType get${AttrName}(){
            return $column.javaField;
            }
    #end
#end

@Override
public String toString(){
        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
    #foreach($column in $columns)
        #if($column.javaField.length()>2 && $column.javaField.substring(1,2).matches("[A-Z]"))
            #set($AttrName = $column.javaField)
        #else
            #set($AttrName = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
        #end
            .append("${column.javaField}",get${AttrName}())
    #end
    #if($template == "tree")
            .append("children",getChildren())
    #end
        .toString();
        }
        }